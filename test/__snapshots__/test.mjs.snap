// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`react.tsx 1`] = `
"src/react.tsx:19:8: Missing return type on function. [Error/@typescript-eslint/explicit-module-boundary-types]
src/react.tsx:21:26: Spreading the same expression multiple times is forbidden [Error/react/jsx-props-no-spread-multi]
src/react.tsx:24:38: forwardRef is used with this component but no ref parameter is set [Error/react/forward-ref-uses-ref]
src/react.tsx:24:39: 'props' is defined but never used. Allowed unused args must match /^_/u. [Error/@typescript-eslint/no-unused-vars]

4 problems"
`;

exports[`simple.ts 1`] = `
"src/simple.ts:1:1: Unexpected var, use let or const instead. [Error/no-var]
src/simple.ts:1:8: Expected a \`const\` assertion instead of a literal type annotation. [Error/@typescript-eslint/prefer-as-const]
src/simple.ts:5:8: Missing return type on function. [Error/@typescript-eslint/explicit-module-boundary-types]
src/simple.ts:6:11: Switch is not exhaustive. Cases not matched: "b" [Error/@typescript-eslint/switch-exhaustiveness-check]
src/simple.ts:12:1: Unexpected var, use let or const instead. [Error/no-var]
src/simple.ts:12:5: 'b' is assigned a value but never used. Allowed unused vars must match /^_/u. [Error/@typescript-eslint/no-unused-vars]
src/simple.ts:12:11: Unexpected number value in conditional. An explicit zero/NaN check is required. [Error/@typescript-eslint/strict-boolean-expressions]
src/simple.ts:14:8: Function 'thisFunctionIsHardToComprehend' has a complexity of 14. Maximum allowed is 10. [Error/complexity]
src/simple.ts:14:17: Refactor this function to reduce its Cognitive Complexity from 19 to the 10 allowed. [Error/sonarjs/cognitive-complexity]
src/simple.ts:55:25: 'unused' is defined but never used. Allowed unused args must match /^_/u. [Error/@typescript-eslint/no-unused-vars]
src/simple.ts:60:15: The \`{}\` ("empty object") type allows any non-nullish value, including literals like \`0\` and \`""\`.
- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.
- If you want a type meaning "any object", you probably want \`object\` instead.
- If you want a type meaning "any value", you probably want \`unknown\` instead. [Error/@typescript-eslint/no-empty-object-type]
src/simple.ts:66:15: Property bar should be declared as a class property. [Error/@typescript-eslint/parameter-properties]
src/simple.ts:67:5: This assignment is unnecessary since it is already assigned by a parameter property. [Error/@typescript-eslint/no-unnecessary-parameter-property-assignment]
src/simple.ts:71:45: Type parameter A is used only once in the function signature. [Error/@typescript-eslint/no-unnecessary-type-parameters]
src/simple.ts:75:36: The \`Function\` type accepts any function-like value.
Prefer explicitly defining any function parameters and return type. [Error/@typescript-eslint/no-unsafe-function-type]
src/simple.ts:78:4: tsdoc-undefined-tag: The TSDoc tag "@foobar" is not defined in this configuration [Error/tsdoc/syntax]
src/simple.ts:80:35: Prefer using the primitive \`number\` as a type name, rather than the upper-cased \`Number\`. [Error/@typescript-eslint/no-wrapper-object-types]
src/simple.ts:83:4: tsdoc-missing-deprecation-message: The @deprecated block must include a deprecation message, e.g. describing the recommended alternative [Error/tsdoc/syntax]
src/simple.ts:88:3: \`deprecated\` is deprecated. [Error/@typescript-eslint/no-deprecated]
src/simple.ts:96:12: Don't use \`BrokenType\` as a type. BrokenType is broken. Use NonBrokenType instead [Error/@typescript-eslint/no-restricted-types]

20 problems"
`;
